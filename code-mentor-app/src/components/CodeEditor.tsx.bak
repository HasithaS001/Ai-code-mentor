"use client";

import { useRef, useState, useEffect } from 'react';
import { useSettings } from '../contexts/SettingsContext';
import Editor, { Monaco } from '@monaco-editor/react';
import { translateText } from '../utils/translation';
import Image from 'next/image';
import { FaVolumeUp, FaSpinner, FaProjectDiagram, FaChevronUp, FaChevronDown } from 'react-icons/fa';
import VisualExplanation from './VisualExplanation';
import { textToSpeech, stopAudio, getCurrentAudioElement, isGeneratingAudio } from '../utils/tts';

interface CodeEditorProps {
  file: {
    name: string;
    content: string;
    language: string;
  };
}

export default function CodeEditor({ file }: CodeEditorProps) {
  // Get settings for voice and language
  const { settings } = useSettings();
  const editorRef = useRef<any>(null);
  const [selectedCode, setSelectedCode] = useState('');
  const [selectionPosition, setSelectionPosition] = useState<{ x: number; y: number } | null>(null);
  const [explanation, setExplanation] = useState<string | null>(null);
  const [translatedExplanation, setTranslatedExplanation] = useState<string | null>(null);
  const [isExplaining, setIsExplaining] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [activeTab, setActiveTab] = useState<'text' | 'visual' | 'voice'>('text');
  const [isGeneratingVisual, setIsGeneratingVisual] = useState(false);
  const [currentContent, setCurrentContent] = useState(file.content);
  const [currentLanguage, setCurrentLanguage] = useState(file.language);
  const [panelHeight, setPanelHeight] = useState<number>(250); // Default height in pixels
  const [isResizing, setIsResizing] = useState<boolean>(false);
  const [speechProgress, setSpeechProgress] = useState<number>(0);
  const [isPanelExpanded, setIsPanelExpanded] = useState<boolean>(false);
  const [showSpeedMenu, setShowSpeedMenu] = useState<boolean>(false);
  const [playbackSpeed, setPlaybackSpeed] = useState<number>(1.0);
  const [hasPlayedOnce, setHasPlayedOnce] = useState<boolean>(false);
  const [isLoadingAudio, setIsLoadingAudio] = useState(false);
  const resizingRef = useRef<{ startY: number, startHeight: number } | null>(null);
  const audioRef = useRef<HTMLAudioElement | null>(null);
  const defaultPanelHeight = 250;
  const expandedPanelHeight = 500;

  // Update editor when file changes
  useEffect(() => {
    setCurrentContent(file.content);
    setCurrentLanguage(file.language);
    setSelectedCode('');
    setSelectionPosition(null);
    setExplanation(null);
    setActiveTab('text');
    
    if (audioRef.current) {
      audioRef.current.pause();
      setIsPlaying(false);
    }
  }, [file]);

  // Handle editor mount
  const handleEditorDidMount = (editor: any, monaco: Monaco) => {
    editorRef.current = editor;

    // Listen for selection changes
    editor.onDidChangeCursorSelection((e: any) => {
      const selection = editor.getModel().getValueInRange(e.selection);
      
      if (selection && selection.trim().length > 0) {
        setSelectedCode(selection);
        
        // Get position for tooltip
        const domNode = editor.getDomNode();
        if (domNode) {
          const editorCoords = domNode.getBoundingClientRect();
          const lineHeight = editor.getOption(monaco.editor.EditorOption.lineHeight);
          const { startLineNumber, startColumn } = e.selection;
          const position = editor.getScrolledVisiblePosition({ lineNumber: startLineNumber, column: startColumn });
          
          if (position) {
            setSelectionPosition({
              x: editorCoords.left + position.left,
              y: editorCoords.top + position.top + lineHeight
            });
          }
        }
      } else {
        setSelectedCode('');
        setSelectionPosition(null);
      }
    });
  };

  // Get language from file extension
  const getLanguage = () => {
    const ext = file.name.split('.').pop()?.toLowerCase();
    const languageMap: Record<string, string> = {
      js: 'javascript',
      jsx: 'javascript',
      ts: 'typescript',
      tsx: 'typescript',
      py: 'python',
      java: 'java',
      html: 'html',
      css: 'css',
      json: 'json',
      md: 'markdown',
    };
    
    return languageMap[ext || ''] || 'plaintext';
  };

  // Handle explain button click
  const handleExplain = async () => {
    if (!selectedCode || isExplaining) return;
    
    setIsExplaining(true);
    setExplanation(null);
    setHasPlayedOnce(false); // Reset the played once flag for new explanations
    setActiveTab('voice'); // Default to voice tab instead of text tab
    
    try {
      const response = await fetch('/api/explain-code', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          code: selectedCode,
          language: getLanguage(),
        }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to explain code');
      }
      
      const data = await response.json();
      setExplanation(data.explanation);
      
      // Translate explanation if language is not English
      if (settings.language !== 'en') {
        try {
          const translated = await translateText(data.explanation, settings.language);
          setTranslatedExplanation(translated);
        } catch (error) {
          console.error('Error translating explanation:', error);
          setTranslatedExplanation(data.explanation); // Fallback to original text
        }
      } else {
        setTranslatedExplanation(data.explanation); // No translation needed
      }
      
      // Auto-play the explanation when it's ready
      try {
        setSpeechProgress(0);
        setIsLoadingAudio(true); // Set loading state when starting audio generation
        
        textToSpeech(data.explanation, settings.language, {
          onProgress: (progress) => setSpeechProgress(progress),
          onComplete: () => {
            setSpeechProgress(100);
            setIsLoadingAudio(false); // Clear loading state when complete
            setTimeout(() => {
              setIsPlaying(false);
              setSpeechProgress(0);
            }, 500);
          },
          playbackSpeed: playbackSpeed
        }).catch(err => {
          console.error('Error playing speech:', err);
          setIsPlaying(false);
          setIsLoadingAudio(false); // Clear loading state on error
          setSpeechProgress(0);
        });
        setIsPlaying(true);
      } catch (error) {
        console.error('Error converting explanation to speech:', error);
        setIsPlaying(false);
        setIsLoadingAudio(false); // Clear loading state on error
        setSpeechProgress(0);
      }
    } catch (error) {
      console.error('Error explaining code:', error);
      setExplanation('Failed to explain code. Please try again.');
    } finally {
      setIsExplaining(false);
    }
  };

  const generateVisualExplanation = async () => {
    if (!selectedCode) return;
    
    setIsGeneratingVisual(true);
    
    try {
      // The actual API call is handled in the VisualExplanation component
      // This is just to simulate the loading state
      setTimeout(() => {
        setIsGeneratingVisual(false);
      }, 1000);
    } catch (error) {
      console.error('Error generating visual explanation:', error);
      setIsGeneratingVisual(false);
    }
  };

  // Effect to translate explanation when language changes
  useEffect(() => {
    const translateExplanation = async () => {
      if (explanation && settings.language !== 'en') {
        try {
          const translated = await translateText(explanation, settings.language);
          setTranslatedExplanation(translated);
        } catch (error) {
          console.error('Error translating explanation on language change:', error);
          setTranslatedExplanation(explanation); // Fallback to original text
        }
      } else if (explanation) {
        setTranslatedExplanation(explanation); // No translation needed for English
      }
    };
    
    translateExplanation();
  }, [settings.language, explanation]);

  // Handle speech synthesis initialization
  useEffect(() => {
    // Initialize speech synthesis voices when component mounts
    if ('speechSynthesis' in window) {
      // Force load voices
      window.speechSynthesis.getVoices();
      
      // Chrome needs this event to properly load voices
      window.speechSynthesis.onvoiceschanged = () => {
        // Voices are now loaded
        console.log('Speech synthesis voices loaded');
      };
    }
    
    return () => {
      // Cancel any ongoing speech when component unmounts
      if ('speechSynthesis' in window) {
        window.speechSynthesis.cancel();
      }
    };
  }, []);
  
  // Handle panel resizing
  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      if (!isResizing || !resizingRef.current) return;
      
      const dy = resizingRef.current.startY - e.clientY;
      const newHeight = Math.max(150, Math.min(600, resizingRef.current.startHeight + dy));
      setPanelHeight(newHeight);
    };
    
    const handleMouseUp = () => {
      setIsResizing(false);
      resizingRef.current = null;
    };
    
    if (isResizing) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
    }
    
    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, [isResizing]);
  
  const startResizing = (e: React.MouseEvent) => {
    e.preventDefault();
    setIsResizing(true);
    resizingRef.current = {
      startY: e.clientY,
      startHeight: panelHeight
    };
  };
  
  // Toggle panel expansion
  const togglePanelExpansion = () => {
    const newExpandedState = !isPanelExpanded;
    setIsPanelExpanded(newExpandedState);
    setPanelHeight(newExpandedState ? expandedPanelHeight : defaultPanelHeight);
  };

  return (
    <div className="h-full relative">
      {/* Adjust editor container height when explanation panel is visible */}
      <div 
        className="relative" 
        style={{ height: explanation ? `calc(100% - ${panelHeight}px)` : '100%' }}
      >
      <Editor
        height="100%"
        language={currentLanguage || getLanguage()}
        value={currentContent}
        options={{
          readOnly: true,
          minimap: { 
            enabled: true,
            maxColumn: 60,  // Limit width
            showSlider: 'mouseover',
            renderCharacters: false, // Simplified rendering
            side: 'right'
          },
          scrollBeyondLastLine: false,
          fontSize: 14,
          wordWrap: 'on',
        }}
        onMount={handleEditorDidMount}
      />
      </div>
      
      {/* Explanation tooltip */}
      {selectionPosition && selectedCode && (
        <div
          className="absolute z-10 bg-white rounded-md shadow-lg border border-gray-200"
          style={{
            left: `${selectionPosition.x}px`,
            top: `${selectionPosition.y}px`,
            transform: 'translateY(8px)',
          }}
        >
          <button
            onClick={handleExplain}
            disabled={isExplaining}
            className="group flex items-center space-x-2 px-4 py-2 text-sm font-medium text-white bg-gradient-to-r from-indigo-500 to-blue-600 hover:from-indigo-600 hover:to-blue-700 rounded-full shadow-md transition-all duration-300 hover:shadow-lg"
          >
            {isExplaining ? (
              <>
                <FaSpinner className="animate-spin" />
                <span>Explaining...</span>
              </>
            ) : (
              <>
                <div className="w-6 h-6 relative overflow-hidden rounded-full ring-2 ring-white/50 transform transition-transform group-hover:scale-110">
                  <Image 
                    src="/code.jpg" 
                    alt="Explain Code" 
                    width={24} 
                    height={24} 
                    className="rounded-full object-cover" 
                  />
                </div>
                <span className="ml-2">Explain Now</span>
              </>
            )}
          </button>
        </div>
      )}
      
      {/* Explanation panel */}
      {explanation && (
        <div 
          className="absolute bottom-0 left-0 right-0 bg-white border-t border-gray-200 shadow-lg overflow-hidden flex flex-col z-20"
          style={{ height: `${panelHeight}px`, maxHeight: '60vh' }}
        >
          {/* Modern rounded arrow button in right corner */}
          <div 
            className="absolute top-2 right-4 w-10 h-10 rounded-full bg-gradient-to-r from-indigo-500 to-blue-600 shadow-md hover:shadow-lg flex justify-center items-center cursor-pointer transition-all duration-300 hover:from-indigo-600 hover:to-blue-700 z-10"
            onClick={togglePanelExpansion}
          >
            {isPanelExpanded ? 
              <FaChevronDown className="text-white" size={18} /> : 
              <FaChevronUp className="text-white" size={18} />
            }
          </div>
          
          {/* No audio controls in text tab - moved to Voice tab */}
          
          {/* Content container with no top padding */}
          <div className="overflow-auto flex-1 px-4">
            
            {/* Modern Tab Navigation */}
            <div className="flex justify-center items-center mb-6 px-4">
              <div className="bg-gray-100 p-1 rounded-xl shadow-inner flex items-center relative">
                {/* Animated background highlight */}
                <div 
                  className="absolute h-8 transition-all duration-300 ease-in-out bg-blue-600 rounded-lg shadow-md z-0"
                  style={{
                    left: activeTab === 'voice' ? '4px' : activeTab === 'text' ? '33.33%' : '66.66%',
                    width: 'calc(33.33% - 8px)',
                  }}
                ></div>
                
                {/* Voice Tab */}
                <button
                  className={`px-4 py-1.5 rounded-lg z-10 flex items-center justify-center transition-colors duration-300 relative ${activeTab === 'voice' ? 'text-white font-medium' : 'text-gray-700 hover:text-gray-900'}`}
                  style={{ width: 'calc(33.33% - 4px)' }}
                  onClick={() => {
                    // First stop any existing playback to prevent issues when switching tabs
                    if (isPlaying) {
                      stopAudio();
                      setIsPlaying(false);
                    }
                    
                    setActiveTab('voice');
                    
                    // Auto-play the explanation when Voice tab is selected, but only if it hasn't been played before
                    if (explanation && !hasPlayedOnce && !isLoadingAudio) {
                      setSpeechProgress(0);
                      setIsLoadingAudio(true); // Set loading state
                      
                      // Start new speech with current playback speed
                      textToSpeech(explanation, settings.language, {
                        onProgress: (progress: number) => setSpeechProgress(progress),
                        onComplete: () => {
                          setSpeechProgress(100);
                          setIsLoadingAudio(false); // Clear loading state
                          setTimeout(() => {
                            setIsPlaying(false);
                            setSpeechProgress(0);
                            // Mark as played once
                            setHasPlayedOnce(true);
                          }, 500);
                        },
                        playbackSpeed: playbackSpeed
                      }).catch(err => {
                        console.error('Error playing speech:', err);
                        setIsPlaying(false);
                        setIsLoadingAudio(false); // Clear loading state on error
                        setSpeechProgress(0);
                      });
                      setIsPlaying(true);
                    }
                  }}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15.536a5 5 0 001.414 1.414m0 0l-2.828 2.828-3.536-3.536 2.828-2.828m13.434 0l2.828 2.828-3.536 3.536-2.828-2.828" />
                  </svg>
                  Voice
                </button>
                
                {/* Text Tab */}
                <button
                  className={`px-4 py-1.5 rounded-lg z-10 flex items-center justify-center transition-colors duration-300 relative ${activeTab === 'text' ? 'text-white font-medium' : 'text-gray-700 hover:text-gray-900'}`}
                  style={{ width: 'calc(33.33% - 4px)' }}
                  onClick={() => {
                    // Stop any playing audio when switching to text tab
                    if (isPlaying) {
                      stopAudio();
                      setIsPlaying(false);
                    }
                    setActiveTab('text');
                  }}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h7" />
                  </svg>
                  Text
                </button>
                
                {/* Visual Tab */}
                <button
                  className={`px-4 py-1.5 rounded-lg z-10 flex items-center justify-center transition-colors duration-300 relative ${activeTab === 'visual' ? 'text-white font-medium' : 'text-gray-700 hover:text-gray-900'}`}
                  style={{ width: 'calc(33.33% - 4px)' }}
                  onClick={() => {
                    // Stop any playing audio when switching to visual tab
                    if (isPlaying) {
                      stopAudio();
                      setIsPlaying(false);
                    }
                    
                    setActiveTab('visual');
                    if (!isGeneratingVisual && selectedCode) {
                      generateVisualExplanation();
                    }
                  }}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z" />
                  </svg>
                  Visual
                </button>
              </div>
            </div>
            
            {activeTab === 'text' ? (
              <div className="prose prose-sm max-w-none px-4">
                {(translatedExplanation || explanation)?.split('\n').map((paragraph, index) => (
                  <p key={index} className="mb-2 text-[#364153]" style={{ fontSize: '16px' }}>
                    {paragraph}
                  </p>
                ))}
              </div>
            ) : activeTab === 'visual' ? (
              <div className="h-full px-4" style={{ minHeight: '200px' }}>
                {isGeneratingVisual ? (
                  <div className="flex items-center justify-center h-full">
                    <FaSpinner className="animate-spin text-blue-500" size={24} />
                    <span className="ml-2 text-gray-600">Generating visual explanation...</span>
                  </div>
                ) : (
                  <VisualExplanation code={selectedCode} language={currentLanguage || getLanguage()} panelHeight={panelHeight - 100} />
                )}
              </div>
            ) : (
              <div className="h-full flex items-center justify-center" style={{ minHeight: '150px' }}>
                <div className="flex flex-col items-center justify-center w-full">
                  {/* Minimalistic playback UI - just narration icons */}
                  <div className="w-full flex justify-center items-center py-6">
                    {/* Minimalistic playback controls */}
                    <div className="flex items-center justify-center gap-3">
                      {/* Status indicator - small dot */}
                      {isLoadingAudio && (
                        <div className="animate-pulse mr-2 text-blue-500 text-sm">
                          Generating audio...
                        </div>
                      )}
                      
                      {/* Play/Pause button - modern minimalist style */}
                      <button
                        onClick={() => {
                          if (isPlaying) {
                            // Stop current playback
                            stopAudio();
                            setIsPlaying(false);
                          } else {
                            // Start new speech
                            setSpeechProgress(0);
                            setIsLoadingAudio(true);
                            textToSpeech(explanation, settings.language, {
                              onProgress: (progress: number) => {
                                setSpeechProgress(progress);
                              },
                              onComplete: () => {
                                setSpeechProgress(100);
                                setIsLoadingAudio(false);
                                setTimeout(() => {
                                  setIsPlaying(false);
                                  setSpeechProgress(0);
                                }, 500);
                              },
                              playbackSpeed: playbackSpeed
                            }).catch(err => {
                              console.error('Error playing speech:', err);
                              setIsPlaying(false);
                              setIsLoadingAudio(false);
                              setSpeechProgress(0);
                            });
                            setIsPlaying(true);
                          }
                        }}
                        disabled={isLoadingAudio}
                        className={`p-2 rounded-full transition-all duration-200 ${isLoadingAudio ? 'opacity-50 cursor-not-allowed' : 'hover:bg-blue-50'}`}
                      >
                        {isLoadingAudio ? (
                          <div className="animate-spin rounded-full h-6 w-6 border-2 border-blue-500 border-t-transparent"></div>
                        ) : isPlaying ? (
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 9v6m4-6v6" />
                          </svg>
                        ) : (
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                          </svg>
                        )}
                      </button>
                        
                        {/* Replay button - minimalist style */}
                        <button
                          onClick={() => {
                            // Stop any current playback
                            stopAudio();
                            
                            // Start speech from beginning with current speed
                            setSpeechProgress(0);
                            setIsLoadingAudio(true);
                            textToSpeech(explanation, settings.language, {
                              onProgress: (progress: number) => {
                                setSpeechProgress(progress);
                              },
                              onComplete: () => {
                                setSpeechProgress(100);
                                setIsLoadingAudio(false);
                                setTimeout(() => {
                                  setIsPlaying(false);
                                  setSpeechProgress(0);
                                }, 500);
                              },
                              // Use current playback speed
                              playbackSpeed: playbackSpeed
                            }).catch(err => {
                              console.error('Error playing speech:', err);
                              setIsPlaying(false);
                              setIsLoadingAudio(false);
                              setSpeechProgress(0);
                            });
                            setIsPlaying(true);
                          }}
                          className="p-2 rounded-full hover:bg-blue-50 transition-all duration-200"
                          title="Restart narration"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                          </svg>
                        </button>
                        
                        {/* Stop button - minimalist style */}
                        <button
                          onClick={() => {
                            // Stop any current playback
                            stopAudio();
                            setIsPlaying(false);
                            setSpeechProgress(0);
                          }}
                          className="p-2 rounded-full hover:bg-blue-50 transition-all duration-200"
                          title="Stop narration"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.536 8.464a5 5 0 010 7.072M12 9v6m0 0l-3-3m3 3l3-3" />
                          </svg>
                        </button>
                        
                        {/* Playback speed button - minimalist style */}
                        <div className="relative">
                          <button
                            onClick={() => setShowSpeedMenu(!showSpeedMenu)}
                            className="p-2 rounded-full hover:bg-blue-50 transition-all duration-200 flex items-center"
                            title="Playback speed"
                          >
                            <span className="text-xs font-bold text-blue-600 mr-1">{playbackSpeed}x</span>
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                            </svg>
                          </button>
                          
                          {showSpeedMenu && (
                            <div className="absolute bottom-full mb-2 right-0 bg-white rounded-lg shadow-lg overflow-hidden z-10 w-24">
                              {[0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0].map((speed) => (
                                <button
                                  key={speed}
                                  onClick={() => {
                                    setPlaybackSpeed(speed);
                                    setShowSpeedMenu(false);
                                    
                                    // If audio is currently playing, adjust its speed without restarting
                                    const currentAudio = getCurrentAudioElement();
                                    if (isPlaying && currentAudio) {
                                      currentAudio.playbackRate = speed;
                                    }
                                  }}
                                  className={`w-full text-left px-2 py-1 text-sm ${playbackSpeed === speed ? 'bg-blue-100 text-blue-700' : 'hover:bg-gray-50'}`}
                                >
                                  {speed}x
                                </button>
                              ))}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="max-w-none px-2 mt-1">
                    <p className="text-center text-xs text-gray-500">
                      {playbackSpeed}x speed
                    </p>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}
